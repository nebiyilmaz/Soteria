<?php
include 'config.php';

include 'getPentestIssueCountsByTicket.php';


/* 
    SAST Issue EPIC Link - SB-241
*/
//$JiraURL="https://divido.atlassian.net/rest/agile/1.0/epic/20083/issue?maxResults=1500";
//$JiraURL='https://divido.atlassian.net/rest/api/2/issue/SB-470?fields=issuelinks';





/* 
    If API token fails, this is a workaround for session. It can be obtained from jira web session from developer tools. 
    It should be set via "curl_setopt()" as follows.
    $JiraCloudToken="cloud.session.token=";
    curl_setopt($ch, CURLOPT_COOKIE, $JiraCloudToken );
*/




$JiraTicketNumber = "SB-470"; // Pentest EPIC Link Number

$JiraURL="https://divido.atlassian.net/rest/api/2/issue/$JiraTicketNumber?fields=issuelinks";

$JiraHeader = array("Content-Type: application/json", "Authorization: Basic $JiraApiToken");


function GetPentestList(){

    global $JiraURL;
    global $JiraHeader;

    $ch = curl_init($JiraURL);

    //curl_setopt($ch, CURLOPT_PROXY, '127.0.0.1:8080');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $JiraHeader);
    //curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($JiraJQL));

    $JiraResponse = curl_exec($ch);
    curl_close($ch);

    $Issues = (array)json_decode($JiraResponse);
    //print_r($Issues);
    //print_r($Issues['fields']->issuelinks[0]->outwardIssue->key);
    $hede = array();
    $hede = $Issues['fields']->issuelinks;
    usort($hede, function($a, $b) { //Sort the array using a user defined function
        return $a->id < $b->id ? -1 : 1; // Sort the Pentest tickets viewed like on jira EPIC link.
    });

    $List = array();
    foreach($hede as $mydata){

        //echo($mydata->id);
        echo($mydata->outwardIssue->key);
        echo "\t";
        echo($mydata->outwardIssue->fields->summary);
        echo "\t";
        echo(GetPentestIssueCounts($mydata->outwardIssue->key, "T"));
        echo "\n";
        array_push($List, array("label" => $mydata->outwardIssue->fields->summary, "y" => GetPentestIssueCounts($mydata->outwardIssue->key, "T")));
    }
    return $List;
}

$PentestList = GetPentestList();

print_r(json_encode($PentestList, JSON_PRETTY_PRINT));
echo "\n";

$file = fopen("json/PentestsByNumbers.json","w");
fwrite($file, json_encode($PentestList, JSON_PRETTY_PRINT));
fclose($file);

exit(1);

$SastIssuesBySeverityAll = array(
    array("label" => "Critical", "y" => $CriticalIssuesCount),
    array("label" => "High", "y" => $HighIssuesCount),
    array("label" => "Medium", "y" => $MediumIssuesCount),
    array("label" => "Low", "y" => $LowIssuesCount),
    array("label" => "Info", "y" => $InfoIssuesCount)
);

print_r(json_encode($SastIssuesBySeverityAll, JSON_PRETTY_PRINT));
echo "\n";
echo "$TotalIssuesCount\n";

//$file = fopen("json/SastIssuesBySeverityAll.json","w");
//fwrite($file, json_encode($SastIssuesBySeverityAll, JSON_PRETTY_PRINT));
//fclose($file);


exit();



?>